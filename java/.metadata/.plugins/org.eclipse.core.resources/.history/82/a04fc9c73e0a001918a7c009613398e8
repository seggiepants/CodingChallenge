package com.segludian.digitaltennis;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;

public class Ball {
	// x: - x - coordinate of the ball.
	// y: - y - coordinate of the ball.
	// angle: direction the ball is moving
	// speed: speed the ball is moving in pixels per second.
	// radius: radius of the circle used to draw the ball.
	// rectangle: Used for collision detection.
	private final int radius = 8;
	private final double defaultBallSpeed = 100.0;
	private double x, y, angle, speed;
	private Rectangle rectangle;
	private Color ballColor;
	
	public Ball(double x, double y) {
		// Initialize ball to default state. The program should pass in the starting position.
		// I assume we are paused so no speed and the direction of travel is straight up.
		this.x = x;
		this.y = y;
		this.angle = Math.PI;
		this.speed = 0.0;
		this.ballColor = Color.WHITE;
		this.rectangle = new Rectangle();
		this.rectangle.width = this.radius * 2;
		this.rectangle.height = this.radius * 2;
	}
	
	// Getters and Setters:	
	/**
	 * 
	 * @return: Current X - Coordinate of the ball.
	 */
	public double getX() {
		return this.x;		
	}
	
	/**
	 * 
	 * @param x : New value for the X - Coordinate of the ball.
	 */
	public void setX(double x) {
		this.x = x;
	}
	
	/**
	 * 
	 * @return: Current Y - Coordinate of the ball.
	 */
	public double getY() {
		return this.y;
	}
	
	/**
	 * 
	 * @param y: New value for the Y - Coordinate of the ball.
	 */
	public void setY(double y) {
		this.y = y;
	}
	
	/**
	 * 
	 * @return: Current direction of travel for the ball. 
	 */
	public double getAngle() {
		return this.angle;
	}
	
	/**
	 * 
	 * @param speed: New value for speed in pixels per second.
	 */
	public void setSpeed(double speed) {
		this.speed = speed;
	}
	
	/**
	 * 
	 * @return: current ball speed.
	 */
	public double getSpeed() {
		return this.speed;
	}
	
	/**
	 * 
	 * @return: The default speed of the ball when served.
	 */
	public double getDefaultSpeed() {
		return this.defaultBallSpeed;
	}
	
	/**
	 * 
	 * @param angle: New value for the balls direction of travel.
	 */
	public void setAngle(double angle) {
		this.angle = angle;
	}
	
	public Rectangle getRectangle() {
		this.rectangle.x = (int) this.x - this.radius; // Update with the current position.
		this.rectangle.y = (int) this.y - this.radius; // Width/Height doesn't change.
		return this.rectangle;
	}
	
	// Update and Draw methods. 
	
	/**
	 * 
	 * @param dt: delta time, time elapsed since the last frame in milliseconds.
	 */
	public void update(double dt) {
		this.x = this.x + ((speed * Math.cos(angle)) * (dt/1000.0));
		this.y = this.y + ((speed * Math.cos(angle)) * (dt/1000.0));
		// Need to add code to bounce off the ceiling, floor, and paddles.
		// Also I need to signal when the paddle hits a dead zone. Maybe I need to put that
		// higher up in a game class.
	}
	
	/**
	 * 
	 * @param g: Graphics context to draw with.
	 */
	public void draw(Graphics g) {
		g.setColor(ballColor);
		g.fillOval((int)this.x - this.radius, (int)this.y + this.radius, (int) this.x + this.radius, (int) this.y + this.radius);
	}
	
}
